// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xss.ComplianceManagementBackEnd.Dao;

namespace xss.ComplianceManagementBackEnd.Migrations
{
    [DbContext(typeof(ComplianceContext))]
    [Migration("20220506183043_migration1")]
    partial class migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceDistributorData", b =>
                {
                    b.Property<int>("ComplianceDistributorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComplianceFieldTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("FieldData")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ComplianceDistributorDataId");

                    b.HasIndex("ComplianceFieldTypeId");

                    b.ToTable("ComplianceDistributorData","Eth");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceDistributorDataLogs", b =>
                {
                    b.Property<int>("ComplianceDistributorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComplianceDistributorDataId")
                        .HasColumnType("int");

                    b.Property<string>("ComplianceDistributorLogData")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ComplianceDistributorLogMessage")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ComplianceDistributorLogId")
                        .HasName("PK__Complian__914C46BF57A8EE80");

                    b.HasIndex("ComplianceDistributorDataId");

                    b.ToTable("ComplianceDistributorDataLogs","Eth");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceFieldType", b =>
                {
                    b.Property<int>("ComplianceFieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplianceFieldTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("ComplianceFileSizeKb")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FieldPath")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FileResourceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<short?>("HeightPx")
                        .HasColumnType("smallint");

                    b.Property<int>("InputBehaviourId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TranslationKey")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<short?>("WidthPx")
                        .HasColumnType("smallint");

                    b.HasKey("ComplianceFieldTypeId");

                    b.HasIndex("FileResourceTypeId");

                    b.HasIndex("InputBehaviourId");

                    b.ToTable("ComplianceFieldType","Eth");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceSource", b =>
                {
                    b.Property<int>("ComplianceSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplianceSourceName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ComplianceSourceId");

                    b.ToTable("ComplianceSource","Eth");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceSourceTypes", b =>
                {
                    b.Property<int>("ComplianceSourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComplianceFieldTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ComplianceFileSizeKb")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceSourceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<short?>("HeightPx")
                        .HasColumnType("smallint");

                    b.Property<byte>("RequiresCompliance")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<short?>("WidthPx")
                        .HasColumnType("smallint");

                    b.HasKey("ComplianceSourceTypeId")
                        .HasName("PK__Complian__C74CA0CF50690A2E");

                    b.HasIndex("ComplianceFieldTypeId");

                    b.HasIndex("ComplianceSourceId");

                    b.ToTable("ComplianceSourceTypes","Eth");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.FileResourceExtension", b =>
                {
                    b.Property<int>("FileResourceExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FileResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FileResourceExtensionId");

                    b.HasIndex("FileResourceTypeId");

                    b.ToTable("FileResourceExtension");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.FileResourceType", b =>
                {
                    b.Property<int>("FileResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("MaxSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TranslationKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FileResourceTypeId");

                    b.ToTable("FileResourceType");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.InputBehaviour", b =>
                {
                    b.Property<int>("InputBehaviourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((99))");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InputBehaviourName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("InputBehaviourId");

                    b.ToTable("InputBehaviour","Gbl");
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceDistributorData", b =>
                {
                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.ComplianceFieldType", "ComplianceFieldType")
                        .WithMany("ComplianceDistributorData")
                        .HasForeignKey("ComplianceFieldTypeId")
                        .HasConstraintName("Fk_ComplianceDistributorData_ComplianceFieldTypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceDistributorDataLogs", b =>
                {
                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.ComplianceDistributorData", "ComplianceDistributorData")
                        .WithMany("ComplianceDistributorDataLogs")
                        .HasForeignKey("ComplianceDistributorDataId")
                        .HasConstraintName("Fk_ComplianceDistributorDataLogs_ComplianceDistributorDataId")
                        .IsRequired();
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceFieldType", b =>
                {
                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.FileResourceType", "FileResourceType")
                        .WithMany("ComplianceFieldTypes")
                        .HasForeignKey("FileResourceTypeId")
                        .HasConstraintName("Fk_ComplianceFieldType_FileesourceTypeId")
                        .IsRequired();

                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.InputBehaviour", "InputBehaviour")
                        .WithMany("ComplianceFieldType")
                        .HasForeignKey("InputBehaviourId")
                        .HasConstraintName("Fk_ComplianceFieldType_InputBehaviourId")
                        .IsRequired();
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.ComplianceSourceTypes", b =>
                {
                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.ComplianceFieldType", "ComplianceFieldType")
                        .WithMany("ComplianceSourceTypes")
                        .HasForeignKey("ComplianceFieldTypeId")
                        .HasConstraintName("Fk_ComplianceSourceTypes_ComplianceFieldTypeId")
                        .IsRequired();

                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.ComplianceSource", "ComplianceSource")
                        .WithMany("ComplianceSourceTypes")
                        .HasForeignKey("ComplianceSourceId")
                        .HasConstraintName("Fk_ComplianceSource_ComplianceSourceId")
                        .IsRequired();
                });

            modelBuilder.Entity("xss.ComplianceManagementBackEnd.Entity.FileResourceExtension", b =>
                {
                    b.HasOne("xss.ComplianceManagementBackEnd.Entity.FileResourceType", "FileResourceType")
                        .WithMany("FileResourceExtension")
                        .HasForeignKey("FileResourceTypeId")
                        .HasConstraintName("FK__FileResou__FileR__4C57E14D")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
